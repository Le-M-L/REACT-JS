[{"F:\\gitHub\\React-admin\\src\\index.js":"1","F:\\gitHub\\React-admin\\src\\App.js":"2","F:\\gitHub\\React-admin\\src\\routes\\index.js":"3","F:\\gitHub\\React-admin\\src\\components\\Frame\\index.jsx":"4","F:\\gitHub\\React-admin\\src\\common\\lazyLoad.js":"5","F:\\gitHub\\React-admin\\src\\assets\\icon\\index.js":"6","F:\\gitHub\\React-admin\\src\\components\\Frame\\Header.jsx":"7","F:\\gitHub\\React-admin\\src\\components\\Frame\\Content.jsx":"8","F:\\gitHub\\React-admin\\src\\pages\\Dashboard\\index.jsx":"9","F:\\gitHub\\React-admin\\src\\pages\\PageNotFound\\index.jsx":"10","F:\\gitHub\\React-admin\\src\\pages\\Login\\index.jsx":"11","F:\\gitHub\\React-admin\\src\\components\\TabsPages\\index.jsx":"12","F:\\gitHub\\React-admin\\src\\reducers\\index.js":"13","F:\\gitHub\\React-admin\\src\\reducers\\reducer.js":"14"},{"size":1422,"mtime":1616501503788,"results":"15","hashOfConfig":"16"},{"size":883,"mtime":1616501498450,"results":"17","hashOfConfig":"16"},{"size":2037,"mtime":1616327700493,"results":"18","hashOfConfig":"16"},{"size":594,"mtime":1616327700489,"results":"19","hashOfConfig":"16"},{"size":607,"mtime":1616327700488,"results":"20","hashOfConfig":"16"},{"size":221,"mtime":1616327700486,"results":"21","hashOfConfig":"16"},{"size":4083,"mtime":1616341192136,"results":"22","hashOfConfig":"16"},{"size":2785,"mtime":1616327700489,"results":"23","hashOfConfig":"16"},{"size":1089,"mtime":1616327700491,"results":"24","hashOfConfig":"16"},{"size":842,"mtime":1616327700492,"results":"25","hashOfConfig":"16"},{"size":4475,"mtime":1616327700492,"results":"26","hashOfConfig":"16"},{"size":2007,"mtime":1616327700490,"results":"27","hashOfConfig":"16"},{"size":307,"mtime":1616327700493,"results":"28","hashOfConfig":"16"},{"size":712,"mtime":1616327700493,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4h39kw",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\gitHub\\React-admin\\src\\index.js",[],"F:\\gitHub\\React-admin\\src\\App.js",[],"F:\\gitHub\\React-admin\\src\\routes\\index.js",[],["62","63"],"F:\\gitHub\\React-admin\\src\\components\\Frame\\index.jsx",[],"F:\\gitHub\\React-admin\\src\\common\\lazyLoad.js",[],"F:\\gitHub\\React-admin\\src\\assets\\icon\\index.js",[],"F:\\gitHub\\React-admin\\src\\components\\Frame\\Header.jsx",["64"],"import React, { useState } from 'react';\r\nimport { Layout, Menu, Dropdown, Badge, Card } from 'antd';\r\nimport { LogoutOutlined, SettingOutlined, UserOutlined, BellOutlined } from '@ant-design/icons';\r\nimport style from './Frame.module.less';\r\nconst { Header, Content, Sider } = Layout;\r\n\r\nconst menuItems = (item) => {\r\n    console.log(item);\r\n};\r\n\r\nconst menu = (\r\n    <Menu style={{ minWidth: '150px' }} onClick={menuItems}>\r\n        <Menu.Item icon={<UserOutlined />}>\r\n            <span>个人中心</span>\r\n        </Menu.Item>\r\n        <Menu.Item icon={<SettingOutlined />}>\r\n            <span>个人设置</span>\r\n        </Menu.Item>\r\n        <div style={{ height: '1px', background: '#eee', margin: '2px 0' }}></div>\r\n        <Menu.Item icon={<LogoutOutlined />} key=\"退出登录\" title=\"退出登录\">\r\n            <span>退出登录</span>\r\n        </Menu.Item>\r\n    </Menu>\r\n);\r\n\r\nconst callback = (val) => {\r\n    console.log(val);\r\n};\r\n\r\n//消息通知模块\r\nconst Information = () => {\r\n    const tabCKey = 'tab1';\r\n    const tabList = [\r\n        {\r\n            key: 'tab1',\r\n            tab: '通知',\r\n        },\r\n        {\r\n            key: 'tab2',\r\n            tab: '消息',\r\n        },\r\n        {\r\n            key: 'tab3',\r\n            tab: '待办',\r\n        },\r\n    ];\r\n    const contentList = {\r\n        tab1: <p>content1</p>,\r\n        tab2: <p>content2</p>,\r\n        tab3: <p>content3</p>,\r\n    };\r\n    return (\r\n        <div>\r\n            <Card\r\n                size=\"small\"\r\n                style={{ width: 300 }}\r\n                tabList={tabList}\r\n                tabProps={{\r\n                    centered: true,\r\n                    size: 'small',\r\n                }}\r\n                defaultActiveTabKey=\"tab1\"\r\n                onTabChange={(key) => {\r\n                    console.log(key);\r\n                }}\r\n            >\r\n                {contentList[tabCKey]}\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n//头部\r\nconst HeaderC = () => {\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    return (\r\n        <Header className={style.Header}>\r\n            <Layout>\r\n                {/* 头部导航栏左边部分 */}\r\n                <Sider width={200}>\r\n                    <div className={style.HeaderLogo}>Header</div>\r\n                </Sider>\r\n                {/* 头部导航栏中间部分 */}\r\n                <Content>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\r\n                        <Menu.Item key=\"1\">nav 1</Menu.Item>\r\n                        <Menu.Item key=\"2\">nav 2</Menu.Item>\r\n                        <Menu.Item key=\"3\">nav 3</Menu.Item>\r\n                    </Menu>\r\n                </Content>\r\n                {/* 头部导航栏右边部分 */}\r\n                <Sider className={style.HeaderR} width=\"auto\">\r\n                    {/* 消息提醒 消息通知 */}\r\n                    <Dropdown\r\n                        trigger={['click']}\r\n                        onVisibleChange={(flag) => setVisible(flag)}\r\n                        placement=\"bottomRight\"\r\n                        overlay={Information}\r\n                        visible={visible}\r\n                    >\r\n                        <span className={style.spanBlock}>\r\n                            <Badge size=\"small\" count={99} offset={[2, 0]}>\r\n                                <BellOutlined style={{ fontSize: '16px', padding: '4px', color: '#fff' }} />\r\n                            </Badge>\r\n                        </span>\r\n                    </Dropdown>\r\n                    {/* 个人中心 个人设置 退出登录等等 */}\r\n                    <Dropdown placement=\"bottomLeft\" overlay={menu}>\r\n                        <span className={`${style.myCenter} ${style.spanBlock}`}>\r\n                            <img src={require('@/assets/images/user.png').default} alt=\"\" />\r\n                            <span>Admin</span>\r\n                        </span>\r\n                    </Dropdown>\r\n                </Sider>\r\n            </Layout>\r\n        </Header>\r\n    );\r\n};\r\n\r\nexport default HeaderC;\r\n","F:\\gitHub\\React-admin\\src\\components\\Frame\\Content.jsx",["65","66"],"import React, { useState } from \"react\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport TabsPages from \"../TabsPages\";\r\nimport { adminRoutes } from \"@/routes\";\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nconst { Content, Sider } = Layout;\r\n\r\nconst routes = adminRoutes.filter((route) => route.isShow);\r\n\r\n//中间主体内容\r\nconst ContentC = (props) => {\r\n    let { location } = props;\r\n    console.log(props.children)\r\n    let [collapsed, setCollapsed] = useState(false);\r\n    let selectKeys = routes.find((item) => item.path === location.pathname);\r\n    return (\r\n        <Layout>\r\n            {routes.length !== 0 ? (\r\n                <Sider\r\n                    width={200}\r\n                    breakpoint=\"lg\"\r\n                    collapsedWidth=\"80\"\r\n                    onBreakpoint={broken => {}}\r\n                    collapsed={collapsed}\r\n                    onCollapse={() => setCollapsed(!collapsed)}\r\n                >\r\n                    {/* <div className=\"logo\" /> */}\r\n                    <Menu\r\n                        mode=\"inline\"\r\n                        theme=\"dark\"\r\n                        defaultSelectedKeys={selectKeys && selectKeys.path}\r\n                        defaultOpenKeys={[\"sub1\"]}\r\n                        style={{ borderRight: 0 }}\r\n                    >\r\n                        {/* 动态侧栏 */}\r\n                        {routes.map((route) => {\r\n                            return (\r\n                                <Menu.Item\r\n                                    icon={route.icon}\r\n                                    key={route.path}\r\n                                    onClick={(p) => props.history.push(p.key)}\r\n                                >\r\n                                    {route.title}\r\n                                </Menu.Item>\r\n                            );\r\n                        })}\r\n                    </Menu>\r\n                </Sider>\r\n            ) : null}\r\n\r\n            <Layout style={{ padding: \"0 24px 24px\" }}>\r\n                {/* <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n                    <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                </Breadcrumb> */}\r\n                {/* <TabsPages /> */}\r\n                <Content\r\n                    style={{\r\n                        padding: 24,\r\n                        margin: 0,\r\n                        minHeight: 280,\r\n                    }}\r\n                >\r\n                    {/* <Scrollbars autoHide > */}\r\n                        {props.children}\r\n                    {/* </Scrollbars> */}\r\n                </Content>\r\n            </Layout>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default ContentC;\r\n","F:\\gitHub\\React-admin\\src\\pages\\Dashboard\\index.jsx",[],"F:\\gitHub\\React-admin\\src\\pages\\PageNotFound\\index.jsx",[],"F:\\gitHub\\React-admin\\src\\pages\\Login\\index.jsx",["67","68"],"import React, { useState, useEffect, useImperativeHandle, useRef } from \"react\";\r\nimport { Form, Input, Button, Checkbox, Skeleton } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport ReactCanvasNest from \"react-canvas-nest\";\r\nconst rules = {\r\n    username: [\r\n        {\r\n            required: true,\r\n            message: \"请输入用户名\",\r\n        },\r\n    ],\r\n    password: [\r\n        {\r\n            required: true,\r\n            message: \"请输入密码\",\r\n        },\r\n    ],\r\n};\r\n//表单组件\r\nconst FormDom = ({childRef,history}) => {\r\n    //验证成功\r\n    const onFinish = (values) => {\r\n        console.log(\"Success:\", values,);\r\n        history.push('/admin')\r\n\r\n    };\r\n    //验证失败\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log(\"Failed:\", errorInfo);\r\n    };\r\n\r\n    useImperativeHandle(childRef, () =>( {\r\n        // changeVal 就是暴露给父组件的方法\r\n        changeVal: (newVal) => {\r\n            console.log('父组件调用子组件',newVal)\r\n        }\r\n    }));\r\n\r\n    useEffect(() => {\r\n       \r\n    }, []);\r\n\r\n    return (\r\n        <Form name=\"basic\" initialValues={{ remember: true }} onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n            <Form.Item name=\"username\" rules={rules.username}>\r\n                <Input prefix={<UserOutlined style={{ fontSize: \"16px\", color: \"#08c\" }} />} placeholder=\"Username\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"password\" rules={rules.password}>\r\n                <Input\r\n                    prefix={<LockOutlined style={{ fontSize: \"16px\", color: \"#08c\" }} />}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                    <Checkbox style={{ color: \"#0ab5e4\" }}>保存密码</Checkbox>\r\n                </Form.Item>\r\n\r\n                <a style={style.forget} href=\"#\">\r\n                    忘记密码\r\n                </a>\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" style={style.submit} htmlType=\"submit\">\r\n                    登 录\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst Login = ({history}) => {\r\n    let [loading, setLoading] = useState(true);\r\n    \r\n    const childRef = useRef(); //传递给子组件 \r\n    const onClickRef = () => { //父组件调用子组件\r\n        childRef.current.changeVal(666)\r\n    };\r\n\r\n    useEffect(() => {\r\n        // useEffect 创建和更新会调用\r\n        setLoading(false)\r\n        return () => {\r\n            //返回一个函数 在清除时执行\r\n            console.log(\"返回一个函数 在清除时执行\");\r\n        };\r\n    }, []); // useEffect 尾部传入一个数组 只在更新的时候更新\r\n\r\n    return (\r\n        <div style={{ width: \"100%\", height: \"100%\" }} className=\"content--canvas\">\r\n            <ReactCanvasNest\r\n                className=\"canvasNest\"\r\n                config={{ pointColor: \" 255, 255, 255 \" }}\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n            />\r\n            \r\n            <div style={style.loginBox}>\r\n                <Skeleton active  loading={loading}>\r\n                    <h1 style={{ textAlign: \"center\", color: \"#0ab5e4\" }}>\r\n                        <img\r\n                            style={{ height: \"44px\", marginRight: 16 }}\r\n                            alt=\"logo\"\r\n                            src=\"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\"\r\n                        />\r\n                        Ant Design\r\n                    </h1>\r\n                    <div style={{ marginTop: 12, textAlign: \"center\", marginBottom: 20, color: \"#0ab5e4\" }}>\r\n                        Ant Design\r\n                    </div>\r\n                    {/* 登录页表单 */}\r\n                    <FormDom childRef={childRef} history={history}  />\r\n                </Skeleton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst style = {\r\n    loginBox: {\r\n        width: \"300px\",\r\n        position: \"fixed\",\r\n        left: \"50%\",\r\n        top: \"30%\",\r\n        transform: \"translate(-50%,-50%)\",\r\n        zIndex: \"11\",\r\n        color: \"#0ab5e4 !important\",\r\n    },\r\n    submit: {\r\n        width: \"100%\",\r\n    },\r\n    forget: {\r\n        float: \"right\",\r\n    },\r\n};\r\n\r\nexport default Login;\r\n","F:\\gitHub\\React-admin\\src\\components\\TabsPages\\index.jsx",[],"F:\\gitHub\\React-admin\\src\\reducers\\index.js",[],"F:\\gitHub\\React-admin\\src\\reducers\\reducer.js",["69"],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":26,"column":7,"nodeType":"76","messageId":"77","endLine":26,"endColumn":15},{"ruleId":"74","severity":1,"message":"78","line":3,"column":8,"nodeType":"76","messageId":"77","endLine":3,"endColumn":17},{"ruleId":"74","severity":1,"message":"79","line":5,"column":10,"nodeType":"76","messageId":"77","endLine":5,"endColumn":20},{"ruleId":"80","severity":1,"message":"81","line":62,"column":17,"nodeType":"82","endLine":62,"endColumn":50},{"ruleId":"74","severity":1,"message":"83","line":80,"column":11,"nodeType":"76","messageId":"77","endLine":80,"endColumn":21},{"ruleId":"84","severity":1,"message":"85","line":13,"column":1,"nodeType":"86","endLine":30,"endColumn":2},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'callback' is assigned a value but never used.","Identifier","unusedVar","'TabsPages' is defined but never used.","'Scrollbars' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'onClickRef' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]