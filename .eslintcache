[{"D:\\personWorkSpace\\REACT-JS\\src\\index.js":"1","D:\\personWorkSpace\\REACT-JS\\src\\App.js":"2","D:\\personWorkSpace\\REACT-JS\\src\\reducers\\index.js":"3","D:\\personWorkSpace\\REACT-JS\\src\\routes\\index.js":"4","D:\\personWorkSpace\\REACT-JS\\src\\reducers\\reducer.js":"5","D:\\personWorkSpace\\REACT-JS\\src\\common\\lazyLoad.js":"6","D:\\personWorkSpace\\REACT-JS\\src\\assets\\icon\\index.js":"7","D:\\personWorkSpace\\REACT-JS\\src\\pages\\Dashboard\\index.jsx":"8","D:\\personWorkSpace\\REACT-JS\\src\\pages\\PageNotFound\\index.jsx":"9","D:\\personWorkSpace\\REACT-JS\\src\\pages\\Login\\index.jsx":"10"},{"size":1452,"mtime":1622704579777,"results":"11","hashOfConfig":"12"},{"size":791,"mtime":1622704614019,"results":"13","hashOfConfig":"12"},{"size":307,"mtime":1620105862659,"results":"14","hashOfConfig":"12"},{"size":2037,"mtime":1620105862660,"results":"15","hashOfConfig":"12"},{"size":712,"mtime":1620105862660,"results":"16","hashOfConfig":"12"},{"size":607,"mtime":1620105862638,"results":"17","hashOfConfig":"12"},{"size":221,"mtime":1620105862634,"results":"18","hashOfConfig":"12"},{"size":1089,"mtime":1620105862657,"results":"19","hashOfConfig":"12"},{"size":842,"mtime":1620105862658,"results":"20","hashOfConfig":"12"},{"size":4475,"mtime":1620105862658,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m08pcm",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},"D:\\personWorkSpace\\REACT-JS\\src\\index.js",[],"D:\\personWorkSpace\\REACT-JS\\src\\App.js",[],"D:\\personWorkSpace\\REACT-JS\\src\\reducers\\index.js",[],["45","46"],"D:\\personWorkSpace\\REACT-JS\\src\\routes\\index.js",[],"D:\\personWorkSpace\\REACT-JS\\src\\reducers\\reducer.js",["47"],"//管理数据 reducer\r\n//暴露出去的是一个方法\r\nconst defaultState = {\r\n    inputValue: '纯函数数据',\r\n    list: [\r\n        '数据1',\r\n        '数据2',\r\n        '数据3',\r\n    ]\r\n}\r\n\r\n//dispatch 方法会触发 action\r\nexport default (state = defaultState, action) => {\r\n\r\n    //reducer里只能接受state,不能改变state\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n    switch (action.type) {\r\n        case 'changeInput':\r\n            newState.inputValue = action.value;\r\n            return newState;\r\n\r\n        case 'addItem':\r\n            newState.list.push(newState.inputValue)\r\n            return newState;\r\n\r\n        default:\r\n            break;\r\n    }\r\n    return state\r\n}","D:\\personWorkSpace\\REACT-JS\\src\\common\\lazyLoad.js",[],"D:\\personWorkSpace\\REACT-JS\\src\\assets\\icon\\index.js",[],"D:\\personWorkSpace\\REACT-JS\\src\\pages\\Dashboard\\index.jsx",[],"D:\\personWorkSpace\\REACT-JS\\src\\pages\\PageNotFound\\index.jsx",[],"D:\\personWorkSpace\\REACT-JS\\src\\pages\\Login\\index.jsx",["48","49"],"import React, { useState, useEffect, useImperativeHandle, useRef } from \"react\";\r\nimport { Form, Input, Button, Checkbox, Skeleton } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport ReactCanvasNest from \"react-canvas-nest\";\r\nconst rules = {\r\n    username: [\r\n        {\r\n            required: true,\r\n            message: \"请输入用户名\",\r\n        },\r\n    ],\r\n    password: [\r\n        {\r\n            required: true,\r\n            message: \"请输入密码\",\r\n        },\r\n    ],\r\n};\r\n//表单组件\r\nconst FormDom = ({childRef,history}) => {\r\n    //验证成功\r\n    const onFinish = (values) => {\r\n        console.log(\"Success:\", values,);\r\n        history.push('/admin')\r\n\r\n    };\r\n    //验证失败\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log(\"Failed:\", errorInfo);\r\n    };\r\n\r\n    useImperativeHandle(childRef, () =>( {\r\n        // changeVal 就是暴露给父组件的方法\r\n        changeVal: (newVal) => {\r\n            console.log('父组件调用子组件',newVal)\r\n        }\r\n    }));\r\n\r\n    useEffect(() => {\r\n       \r\n    }, []);\r\n\r\n    return (\r\n        <Form name=\"basic\" initialValues={{ remember: true }} onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n            <Form.Item name=\"username\" rules={rules.username}>\r\n                <Input prefix={<UserOutlined style={{ fontSize: \"16px\", color: \"#08c\" }} />} placeholder=\"Username\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"password\" rules={rules.password}>\r\n                <Input\r\n                    prefix={<LockOutlined style={{ fontSize: \"16px\", color: \"#08c\" }} />}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                    <Checkbox style={{ color: \"#0ab5e4\" }}>保存密码</Checkbox>\r\n                </Form.Item>\r\n\r\n                <a style={style.forget} href=\"#\">\r\n                    忘记密码\r\n                </a>\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" style={style.submit} htmlType=\"submit\">\r\n                    登 录\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst Login = ({history}) => {\r\n    let [loading, setLoading] = useState(true);\r\n    \r\n    const childRef = useRef(); //传递给子组件 \r\n    const onClickRef = () => { //父组件调用子组件\r\n        childRef.current.changeVal(666)\r\n    };\r\n\r\n    useEffect(() => {\r\n        // useEffect 创建和更新会调用\r\n        setLoading(false)\r\n        return () => {\r\n            //返回一个函数 在清除时执行\r\n            console.log(\"返回一个函数 在清除时执行\");\r\n        };\r\n    }, []); // useEffect 尾部传入一个数组 只在更新的时候更新\r\n\r\n    return (\r\n        <div style={{ width: \"100%\", height: \"100%\" }} className=\"content--canvas\">\r\n            <ReactCanvasNest\r\n                className=\"canvasNest\"\r\n                config={{ pointColor: \" 255, 255, 255 \" }}\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n            />\r\n            \r\n            <div style={style.loginBox}>\r\n                <Skeleton active  loading={loading}>\r\n                    <h1 style={{ textAlign: \"center\", color: \"#0ab5e4\" }}>\r\n                        <img\r\n                            style={{ height: \"44px\", marginRight: 16 }}\r\n                            alt=\"logo\"\r\n                            src=\"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\"\r\n                        />\r\n                        Ant Design\r\n                    </h1>\r\n                    <div style={{ marginTop: 12, textAlign: \"center\", marginBottom: 20, color: \"#0ab5e4\" }}>\r\n                        Ant Design\r\n                    </div>\r\n                    {/* 登录页表单 */}\r\n                    <FormDom childRef={childRef} history={history}  />\r\n                </Skeleton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst style = {\r\n    loginBox: {\r\n        width: \"300px\",\r\n        position: \"fixed\",\r\n        left: \"50%\",\r\n        top: \"30%\",\r\n        transform: \"translate(-50%,-50%)\",\r\n        zIndex: \"11\",\r\n        color: \"#0ab5e4 !important\",\r\n    },\r\n    submit: {\r\n        width: \"100%\",\r\n    },\r\n    forget: {\r\n        float: \"right\",\r\n    },\r\n};\r\n\r\nexport default Login;\r\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":13,"column":1,"nodeType":"56","endLine":30,"endColumn":2},{"ruleId":"57","severity":1,"message":"58","line":62,"column":17,"nodeType":"59","endLine":62,"endColumn":50},{"ruleId":"60","severity":1,"message":"61","line":80,"column":11,"nodeType":"62","messageId":"63","endLine":80,"endColumn":21},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'onClickRef' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]